{"version":3,"sources":["entities/topic/lib.tsx","entities/article/styles.module.scss","entities/article/lib.ts","entities/article/ui.tsx","pages/docs/section/index.tsx"],"names":["GET_STARTED","title","description","icon","RocketOutlined","style","fontSize","href","CONVENTIONS","ApiOutlined","FAQ","QuestionCircleOutlined","HEALTH","WarningOutlined","TECH","ToolOutlined","EXPLORER","FileSearchOutlined","topics","findByTitleSlug","term","find","t","string","slugize","module","exports","getAttrs","content","fm","attributes","H1_REG","getContent","body","getBody","replace","getTitle","path","getFile","attrs","titles","exec","length","parseTitle","ArticlePreview","pathname","type","className","bodyStyle","minHeight","overflow","text","lib","ArticleRow","active","Icon","FileFilled","subtitle","styles","extPreview","topicsMap","topic","articlesMap","docs","getStarted","conventions","faq","SectionPage","props","routeParams","match","params","sectionSlug","section","articleSlug","article","decodeURIComponent","undefined","data","articles","route","useRouteMapping","dom","useProjectTitle","header","Main","Title","level","Text","gutter","paths","map","span","encodeURIComponent","Sider","Placeholder"],"mappings":"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","file":"static/js/12.4d7599e7.chunk.js","sourcesContent":["import {\n    RocketOutlined,\n    WarningOutlined,\n    ApiOutlined,\n    QuestionCircleOutlined,\n    FileSearchOutlined,\n    ToolOutlined,\n} from \"@ant-design/icons\";\nimport type { ReactNode } from \"react\";\nimport { string } from \"shared/lib\";\n\nexport type Topic = {\n    title: string;\n    description: string;\n    icon: ReactNode;\n    href: string;\n};\n\nexport const GET_STARTED: Topic = {\n    title: \"Get Started\",\n    description: \"Onboarding, setup env, quick-start\",\n    icon: <RocketOutlined style={{ fontSize: 20 }} />,\n    href: \"/docs/get-started\",\n};\nexport const CONVENTIONS: Topic = {\n    title: \"Conventions\",\n    description: \"Code, structure, architecture\",\n    icon: <ApiOutlined style={{ fontSize: 20 }} />,\n    href: \"/docs/conventions\",\n};\n\nexport const FAQ: Topic = {\n    title: \"FAQ\",\n    description: \"Frequently Asked Questions\",\n    icon: <QuestionCircleOutlined style={{ fontSize: 20 }} />,\n    href: \"/docs/faq\",\n};\n\nexport const HEALTH: Topic = {\n    title: \"Health\",\n    description: \"Issues tech debt, backlog\",\n    icon: <WarningOutlined style={{ fontSize: 20 }} />,\n    // icon: <BugOutlined style={{ fontSize: 20 }} />,\n    href: \"/health\",\n};\n\nexport const TECH: Topic = {\n    title: \"Tech\",\n    description: \"Tech stack, dependencies\",\n    icon: <ToolOutlined style={{ fontSize: 20 }} />,\n    href: \"/tech\",\n};\n\nexport const EXPLORER: Topic = {\n    title: \"Explorer\",\n    description: \"Project map, inner READMEs\",\n    icon: <FileSearchOutlined style={{ fontSize: 20 }} />,\n    href: \"/explorer\",\n};\n\n// prettier-ignore\nexport const topics: Topic[] = [\n    GET_STARTED,\n    CONVENTIONS,\n    FAQ,\n    HEALTH,\n    TECH,\n    EXPLORER,\n];\n\nexport const findByTitleSlug = (term: string) => {\n    return topics.find((t) => string.slugize(t.title) === term);\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"extPreview\":\"styles_extPreview__2Y3Pf\"};","import fm from \"front-matter\";\n\n// import { string } from \"shared/lib\";\nimport { getFile } from \"shared/api\";\n\n// FIXME: @hardcoded\n\n// NOTE: Наверняка где-то уже есть обработка md файлов, включая атрибуты в начале файла\n// Но я не нашел, поэтому буду писать здесь :(\n\n// FIXME: move to entities lib?\ntype MdAttrs = {\n    title: string;\n    description: string;\n};\n\nexport const getAttrs = (content: string) => {\n    return fm(content).attributes as Partial<MdAttrs>;\n};\n\n// FIXME: add other variations\nexport const H1_REG = /^# (\\w+)/m;\n\nexport const parseTitle = (content: string) => {\n    const titles = H1_REG.exec(content);\n    if (!titles?.length) return;\n    // FIXME: @temp specify\n    return titles[1];\n};\n\n// // FIXME: @temp\n// export const getSummary = (path: string): string => {\n//     const content = getFile(path);\n//     const attrs = getAttrs(content);\n//     if (attrs.description) return attrs.description;\n//     return string.textOverflow(getBody(content));\n// };\n\nexport const getContent = (content: string): string => {\n    return fm(content).body;\n};\n\nexport const getBody = (content: string) => {\n    return getContent(content).replace(H1_REG, \"\");\n};\n\nexport const getTitle = (path: string): string => {\n    const content = getFile(path);\n    const attrs = getAttrs(content);\n    if (attrs.title) return attrs.title;\n    const title = parseTitle(content);\n    if (title) return title;\n    return path;\n};\n","import { Card } from \"antd\";\nimport { FileFilled } from \"@ant-design/icons\";\n\nimport { Markdown, RowCard } from \"shared/ui\";\nimport { getFile } from \"shared/api\";\nimport * as lib from \"./lib\";\nimport styles from \"./styles.module.scss\";\n\ntype BaseProps = {\n    pathname: string;\n};\nexport const ArticlePreview = ({ pathname }: BaseProps) => {\n    const content = getFile(pathname);\n\n    return (\n        <Card\n            type=\"inner\"\n            title={pathname}\n            className=\"mt-20\"\n            bodyStyle={{ minHeight: 500, overflow: \"hidden\" }}\n        >\n            <Markdown text={lib.getContent(content)} />\n        </Card>\n    );\n};\n\ntype Props = BaseProps & {\n    active?: boolean;\n    href?: string;\n};\n\nexport const ArticleRow = ({ pathname, active, href }: Props) => {\n    const content = getFile(pathname);\n    const attrs = lib.getAttrs(content);\n\n    return (\n        <RowCard\n            Icon={FileFilled as any}\n            title={lib.getTitle(pathname)}\n            subtitle={\n                attrs.description ? (\n                    attrs.description\n                ) : (\n                    <pre className={styles.extPreview}>\n                        <Markdown text={lib.getBody(content)} />\n                    </pre>\n                )\n            }\n            href={href}\n            active={active}\n        />\n    );\n};\n","import { Typography, Layout, Row, Col } from \"antd\";\n\nimport { Header } from \"features\";\nimport * as topic from \"entities/topic\";\nimport { NavBreadcrumb } from \"entities/navigation\";\nimport { ArticlePreview, ArticleRow } from \"entities/article\";\nimport { dom } from \"shared/lib\";\nimport { docs } from \"shared/config\";\nimport { Split } from \"shared/ui\";\n\ntype Props = import(\"react-router-dom\").RouteChildrenProps<{\n    section: string;\n    article?: string;\n}>;\n\n// FIXME: @temp\nconst topicsMap: Record<string, topic.Topic> = {\n    \"get-started\": topic.GET_STARTED,\n    \"conventions\": topic.CONVENTIONS,\n    \"faq\": topic.FAQ,\n};\n// FIXME: @temp\nconst articlesMap: Record<string, import(\"shared/config\").DocSection> = {\n    \"get-started\": docs.getStarted,\n    \"conventions\": docs.conventions,\n    \"faq\": docs.faq,\n};\n\n// FIXME: @complexity @decompose\nconst useRouteMapping = (props: Props) => {\n    const routeParams = props.match!.params;\n    const sectionSlug = routeParams.section;\n    const articleSlug = routeParams.article ? decodeURIComponent(routeParams.article) : undefined;\n\n    // FIXME: @temp move to entities/navigation\n    const section = topicsMap[sectionSlug];\n    const articles = articlesMap[sectionSlug];\n    return {\n        data: { section, articles },\n        route: { sectionSlug, articleSlug },\n    };\n};\n\n// FIXME: @hardcoded @temp\n// eslint-disable-next-line max-lines-per-function\nconst SectionPage = (props: Props) => {\n    const { data, route } = useRouteMapping(props);\n    dom.useProjectTitle(data.section.title);\n\n    return (\n        <Split header={<Header />}>\n            <Split.Main>\n                <NavBreadcrumb />\n                <Typography.Title className=\"mt-40\" level={2}>\n                    {data.section.title}\n                </Typography.Title>\n                <Typography.Text type=\"secondary\">{data.section.description}</Typography.Text>\n                <Layout className=\"mt-40\">\n                    <Row gutter={[0, 20]}>\n                        {data.articles.paths.map((path) => (\n                            <Col key={path} span={24}>\n                                <ArticleRow\n                                    pathname={path}\n                                    href={`/docs/${route.sectionSlug}/${encodeURIComponent(path)}`}\n                                    active={route.articleSlug === path}\n                                />\n                            </Col>\n                        ))}\n                    </Row>\n                </Layout>\n            </Split.Main>\n            <Split.Sider>\n                {/* FIXME: @decompose move to /entities/article */}\n                {route.articleSlug && <ArticlePreview pathname={route.articleSlug} />}\n                {!route.articleSlug && <Split.Placeholder title=\"Select article for continue\" />}\n            </Split.Sider>\n        </Split>\n    );\n};\n\nexport default SectionPage;\n"],"sourceRoot":""}