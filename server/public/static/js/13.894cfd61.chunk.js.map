{"version":3,"sources":["entities/file/styles.module.scss","entities/file/ui.tsx","entities/issue/ui.tsx","pages/health/issues/index.tsx"],"names":["module","exports","Preview","pathname","content","extension","path","extname","slice","className","styles","root","rootPathname","text","rootContent","LazyPreview","getFile","SEVERITY_LABEL","1","2","3","4","5","SEVERITY_COLOR","IssueCard","data","Icon","getIssueIcon","icon","style","color","severity","title","tag","subTitle","description","IssueStat","stats","value","valueStyle","map","stat","span","length","IssueRow","active","Ribbon","placement","href","subtitle","IssuesPage","props","params","match","dom","useProjectTitle","issue","issueTag","findIssue","undefined","header","Main","Title","level","gutter","issuesTypes","issueType","Sider","Object","values","PATHS","CODE","getFileIssueSnippets","issueSnippets","Placeholder"],"mappings":"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","file":"static/js/13.894cfd61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__2jobi\",\"rootPathname\":\"styles_rootPathname__1GS6T\"};","import path from \"path\";\nimport { Markdown } from \"shared/ui\";\nimport { getFile } from \"shared/api\";\nimport styles from \"./styles.module.scss\";\n\ntype PreviewProps = {\n    pathname: string;\n    content: string;\n};\n\nexport const Preview = ({ pathname, content }: PreviewProps) => {\n    const extension = path.extname(pathname).slice(1);\n\n    if (!content) return null;\n\n    return (\n        <div className={styles.root}>\n            <Markdown\n                className={styles.rootPathname}\n                text={`\\`\\`\\`${extension}\\n${pathname}\\n\\`\\`\\``}\n            />\n            <Markdown\n                className={styles.rootContent}\n                text={`\\`\\`\\`${extension}\\n${content}\\n\\`\\`\\``}\n            />\n        </div>\n    );\n};\n\ntype LazyPreviewProps = {\n    pathname: string;\n};\n\nexport const LazyPreview = ({ pathname }: LazyPreviewProps) => {\n    // FIXME: load later by selectors?\n    const content = getFile(pathname);\n    return <Preview pathname={pathname} content={content} />;\n};\n","import { Card, Row, Col, Result, Badge, Statistic } from \"antd\";\n\nimport { getIssueIcon } from \"shared/config\";\nimport type { Issue } from \"shared/config\";\nimport { RowCard } from \"shared/ui\";\n\ntype BaseProps = {\n    data: Issue;\n};\n\nconst SEVERITY_LABEL: Record<number, string> = {\n    1: \"LOW\",\n    2: \"MEDIUM\",\n    3: \"HIGH\",\n    4: \"CRITICAL\",\n    5: \"BLOCKER\",\n};\n\nconst SEVERITY_COLOR: Record<number, string> = {\n    1: \"blue\",\n    2: \"gold\",\n    3: \"#f50\",\n    4: \"red\",\n    5: \"pink\",\n};\n\nexport const IssueCard = ({ data }: BaseProps) => {\n    const Icon = getIssueIcon(data.icon);\n    return (\n        <Result\n            icon={<Icon style={{ color: SEVERITY_COLOR[data.severity] }} />}\n            title={data.tag}\n            subTitle={data.description}\n        />\n    );\n};\n\nconst MAX_SPAN = 24;\nexport const IssueStat = ({ data }: BaseProps) => {\n    const stats = [\n        // @hardcoded\n        { title: \"Occurences\", value: 11, valueStyle: {} },\n        {\n            title: \"Severity\",\n            value: SEVERITY_LABEL[data.severity],\n            valueStyle: { color: SEVERITY_COLOR[data.severity] },\n        },\n        // @hardcoded\n        { title: \"How long ago\", value: \"3 months\", valueStyle: {} },\n    ];\n    return (\n        <Row>\n            {stats.map((stat) => (\n                <Col key={stat.title} span={MAX_SPAN / stats.length}>\n                    <Card>\n                        <Statistic {...stat} />\n                    </Card>\n                </Col>\n            ))}\n        </Row>\n    );\n};\n\ntype RowProps = BaseProps & {\n    active?: boolean;\n};\nexport const IssueRow = ({ data, active }: RowProps) => {\n    return (\n        <Badge.Ribbon\n            color={SEVERITY_COLOR[data.severity]}\n            placement=\"end\"\n            text={`Severity: ${SEVERITY_LABEL[data.severity]}`}\n        >\n            <RowCard\n                // FIXME: @hardcoded\n                href={`/health/issues/${data.tag}`}\n                Icon={getIssueIcon(data.icon)}\n                title={data.tag}\n                subtitle={data.description}\n                active={active}\n            />\n        </Badge.Ribbon>\n    );\n};\n","import { Typography, Layout, Row, Col, Divider } from \"antd\";\nimport { RouteChildrenProps } from \"react-router-dom\";\n\nimport { Header } from \"features\";\nimport { File } from \"entities/file\";\nimport { IssueRow, IssueCard, IssueStat } from \"entities/issue\";\nimport { NavBreadcrumb } from \"entities/navigation\";\nimport { dom } from \"shared/lib\";\nimport { getFileIssueSnippets } from \"shared/api\";\nimport { issuesTypes, findIssue, PATHS } from \"shared/config\";\nimport { Split } from \"shared/ui\";\n\ntype Props = RouteChildrenProps<{\n    issueTag?: string;\n}>;\n\n/**\n * @page Страница проблем & тех.долга по проекту\n */\n// eslint-disable-next-line max-lines-per-function\nconst IssuesPage = (props: Props) => {\n    const { params } = props?.match || {};\n\n    dom.useProjectTitle(\"Issues\");\n\n    const issue = params?.issueTag ? findIssue(params.issueTag) : undefined;\n\n    return (\n        <Split header={<Header />}>\n            <Split.Main>\n                <NavBreadcrumb />\n                <Typography.Title className=\"mt-40\" level={2}>\n                    Issues\n                </Typography.Title>\n                <Layout className=\"mt-40\">\n                    <Row gutter={[0, 20]}>\n                        {issuesTypes.map((issueType) => (\n                            <Col key={issueType.tag} span={24}>\n                                <IssueRow data={issueType} active={issueType.tag === issue?.tag} />\n                            </Col>\n                        ))}\n                    </Row>\n                </Layout>\n            </Split.Main>\n            <Split.Sider>\n                {issue && (\n                    <article>\n                        <IssueCard data={issue} />\n                        <IssueStat data={issue} />\n                        <Divider />\n                        <Row gutter={[0, 20]}>\n                            {Object.values(PATHS.CODE).map((pathname) => (\n                                <Col key={pathname} span={24}>\n                                    <File.Preview\n                                        pathname={pathname}\n                                        content={\n                                            getFileIssueSnippets(pathname, issue?.tag || \"\")\n                                                .issueSnippets\n                                        }\n                                    />\n                                </Col>\n                            ))}\n                        </Row>\n                    </article>\n                )}\n                {!issue && <Split.Placeholder title=\"Select issue for continue\" />}\n            </Split.Sider>\n        </Split>\n    );\n};\n\nexport default IssuesPage;\n"],"sourceRoot":""}